# The script automatically fils dummy data for:
# (1) _dplatform_externalReference, (2) id and (3) _dplatform_uid

# Empty entry should raise no errors, but get filtered
- input:
    thisentryis: completelyempty
# Most basic test that should pass
- input:
    title: this is a dummy title
    description: This is a dummy description
  output:
    title: this is a dummy title
    abstractORdescription: This is a dummy description
# Test (1) if the parents of subjects are correctly added, (2) if SOLR
# locations are converted correctly (3) If parent types are correctly added,
# (4) if description types are considered in choosing the correct description
# from a list
- input:
    title: this is a dummy title
    description:
        - type: lineage
          _content: Some talk about lineage
        - type: full
          _content: This is the proper full description of the entry
    subjects:
        - Aerobiology
        - Biophysics
    solr_geom: 'ENVELOPE( -76.13, -75.11, 38.13,37.12)'
    type: Geographic Data
  output:
    title: this is a dummy title
    abstractORdescription: This is the proper full description of the entry
    subject:
        - aerobiology
        - biophysics
        - applied_physics
        - physical_science
        - biology
        - sciences
        - physics
    location:
        - geometry:
            type: envelope
            coordinates: [[-76.13, 38.13], [-75.11, 37.12]]
    type:
        - Dataset
        - Dataset:Geographic
# Test (1) In case a top-level type or subject is added, only this top-level is
# in the results (2) and if a time period with duration is correctly converted,
# (3) If a location dict with type float values is correctly converted, (4) if
# a string description doesn't replace a typed description
- input:
    title: this is a dummy title
    description:
        - type: lineage
          _content: Some talk about lineage
        - type: full
          _content: This is the proper full description of the entry
        - "Some garbage auxiliary description"
    subject: Sciences
    type: Dataset
    temporal: 2016-06-10/P23DT23H
    extent:
        minx: -95.537
        maxx: -79.664
        miny: 31.233
        maxy: 45.176
  output:
    title: this is a dummy title
    abstractORdescription: This is the proper full description of the entry
    subject:
        - sciences
    type:
        - Dataset
    timePeriod:
        - type: About
          start: '2016-06-10'
          end: '2016-07-03'
    location:
        - geometry:
            type: envelope
            coordinates: [[-95.537, 45.176], [-79.664, 31.233]]
# Check if an invalid type entry is correctly filtered
- input:
    title: this is a dummy title
    description: This is a dummy description
    type: learningresource
# Check if irrelevant type entry is correctly filtered
- input:
    title: this is a dummy title
    description: This is a dummy description
    type: preprint
# Test (1) if an envelope type location is correctly translated (with reversed
# y) and (2) if from a list of descriptions with unknown type, the first is
# chosen
- input:
    title: this is a dummy title
    description:
        - type: lineage
          _content: Since all description types are crap, this one should be used
        - type: henk
          _content: not this one
    extent:
        type: envelope
        coordinates: [[-76.13, 37.12], [-75.11, 38.13]]
  output:
    title: this is a dummy title
    abstractORdescription: Since all description types are crap, this one should be used
    location:
        - geometry:
            type: envelope
            coordinates: [[-76.13, 38.13], [-75.11, 37.12]]
# Check (1) if a creator dict with familyName and givenName is translated correctly
# and (2) check if a single date temporal with only a year and a month is not
# erroneously split, and for a month it calculates both end and start, and (3)
# if a bounding box splitted by comma's, is correctly translated
- input:
    title: dummy title of entry
    description: This is a dummy description
    creator:
        givenName: firstname
        familyName: lastname
        affiliation: Affiliation
    temporal: 2012-07
    extent:
        minx: '-95,537'
        maxx: '-79,664'
        miny: '31,233'
        maxy: '45,176'
  output:
    title: dummy title of entry
    abstractORdescription: This is a dummy description
    creator:
        - name: "firstname lastname"
          affiliation: Affiliation
    timePeriod:
        - start: '2012-07-01'
          end: '2012-07-31'
          type: About
    location:
        - geometry:
            type: envelope
            coordinates: [[-95.537, 45.176], [-79.664, 31.233]]
# Check (1) if a list of dicts with string bbox descriptions works, (2) If the
# correct description is chosen, and (3) if the correct title alternative is
# chosen, (4) if a date in a format without seperators is correctly translated
- input:
    title:
        - "This is a plain text tile"
        - type: abbreviated
          _content: Abbreviated title
        - type: primary
          _content: This should be the preferred title
    description:
        - "This is a plain text description"
        - type: full
          _content: "This should be the preferred description"
    created: '20190513'
    spatial:
        - type: iso19139dcmiBox
          _content: 'northlimit=-9.0; southlimit=-44.0; westlimit=96.0; eastLimit=168.0'
        - type: text
          _content: 'northlimit=-9.0; southlimit=-44.0; westlimit=96.0; eastLimit=168.0'
  output:
    title: This should be the preferred title
    abstractORdescription: This should be the preferred description
    created: '2019-05-13'
    location:
        - geometry:
            type: envelope
            coordinates: [[96.0, -9.0], [168.0, -44.0]]
# Check (1) If a location with a bbox data string is correctly interpreted
- input:
    title: "Title of entry"
    description: "Description of entry"
    spatial: "150.0 20.0 170.0 40.0"
  output:
    title: "Title of entry"
    abstractORdescription: "Description of entry"
    location:
        - geometry:
            type: envelope
            coordinates: [[150.0, 40.0], [170.0, 20.0]]
# Check (1) If a location with a pipe seperated bbox data string is correctly
# interpreted
- input:
    title: "Title of entry"
    description: "Description of entry"
    spatial: "150.0|20.0|170.0|40.0"
  output:
    title: "Title of entry"
    abstractORdescription: "Description of entry"
    location:
        - geometry:
            type: envelope
            coordinates: [[150.0, 40.0], [170.0, 20.0]]
# Check if entries with plosone dois are filtered
- input:
    title: "Title of entry"
    description: "Description of entry"
    doi: "10.000.1/journal.pone-henkie"
# If the title starts with appendix, it should be filtered:
- input:
    title: "Appendix 1: The best"
    description: "Description of entry"
    spatial: "150.0|20.0|170.0|40.0"
# If there's a 'figure' reference in the title, it should be filtered:
- input:
    title: "This is Figure 1 of research report 26"
    description: "Description of entry"
    spatial: "150.0|20.0|170.0|40.0"
# If the description starts with 'photograph of', it should be filterd
# If there's a 'figure' reference in the title, it should be filtered:
- input:
    title: "This is a great title for this entry"
    description: "Photograph of some irrelevant piece of shit we don't need"
    spatial: "150.0|20.0|170.0|40.0"
# If 'paper' is in the title, and it only has text based formats, it should
# be assigned type 'Document'
- input:
    title: "This is a title containing paper"
    description: "Description of entry"
    format: ['DOCX', 'RTF']
  output:
    title: "This is a title containing paper"
    abstractORdescription: "Description of entry"
    type: ['Document']
# If 'report' is in the title, and it only has text based formats, it should
# be assigned type 'Document:Report'
- input:
    title: "This is a title containing report"
    description: "Description of entry"
    format: ['PDF']
  output:
    title: "This is a title containing report"
    abstractORdescription: "Description of entry"
    type: ['Document', 'Document:Report']
# If 'report' is in the title, and it doesn't only have text formats, do not
# add type information
- input:
    title: "This is a title containing report"
    description: "Description of entry"
    format: ['PDF', 'PPT']
  output:
    title: "This is a title containing report"
    abstractORdescription: "Description of entry"